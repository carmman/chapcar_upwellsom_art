# Gérer son code avec Git et GitHub
#
# mini tutoriel:
#   http://www.inspyration.org/tutoriels/mini-tutoriel-sur-git
#
#--------1---------2---------3---------4---------5---------6--------
#2345678901234567890123456789012345678901234567890123456789012345678

# ------------------------------------------------------------------
# Installer git ...

# ------------------------------------------------------------------
# Configurer git
#
# git config --global VARIABLE  VALEUR
# 
# par exemple :

git config --global  user.name  Carlos Mejia

git config --global  user.email  Carlos.Mejia@locean-ipsl.upmc.fr

# Pour lister les variables:

git config --global --list

# Pour effacer une variable :
# p.ex, si l'on s'est trompé et mis  'user.emal' à la place de 
# 'user.email' alors, pour l'effacer:

git config --global --unset user.emal

# ------------------------------------------------------------------
# Création d'un repository ...
# ------------------------------------------------------------------
# ... du répertoire en cours ...
#
# mkdir PourCarlos2_pour_Article
# cd PourCarlos2_pour_Article/
# unzip ../PourCarlos2.zip
# mv PourCarlos2 code

git init

# voir status ...

git status

# ------------------------------------------------------------------
# Gestion des exceptions (il faut d'abord creer le repository):
#
# Apres avoir initialisé git dans le répertoire (voir création d'un
# repository, ci-dessous), éditer le fichier ".git/info/exclude" et
# ajouter les noms ou expressions régulières des fichiers ou
# répertoires a ne pas tenir en compte.
#
# vi .git/info/exclude
#
# Décommenter la ligne avec '*~' et ajouter les autres lignes, l'idee
# étant de n'inclure dans le repository que les fichiers de code :
# *~
# .#*
# # #######################################
# # Repertoires a exclure des soumissions:
# Datas
# Docs
# figs
# maps
# docs_python
# trieddoc
# __pycache__
# .DS_Store
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# Ajouter des fichiers (PREMIER ADD) plus le fichier git_cmd_summary.txt, 
# fichier de rappel de commandes git executes pour ce cas.

git add code git_cmd_summary.txt

# ------------------------------------------------------------------
# Commiter les additions ... 
# il faut toujours ajouter un message identifiant le pourquoi du
# commit:

# PREMIER COMMIT
git commit -m "Code de Charles envoye sous le nom PourCarlos2 du 12/06/2018"


# Fichiers provenant de Windows, je converti les fin de ligne des
# fichiers texte au monde unix ...
cd code/
dos2unix *.py
dos2unix triedpy/*.py
dos2unix triedpy/archives/*.py
dos2unix triedpy/*.txt

# DEUXIEME COMMIT (fichiers texte convertis a unix ...)
git commit -am "Conversion dos2unix de tout *.py et *.txt"


# ------------------------------------------------------------------
# Pour se positionner dans une branche, c-a-d: revenir sur une version
# alternative ou precedente du code.
#
# Faire d'abord git log pour connaitre les multiples commits, ou etats
# intermediaires où revenir ...
#
# Puis, ici, si l'on veut revenir par exemple a l'etat initial, apres
# l'adaptation de la version de Charles aux chemins de données locaux
# faire :

git checkout 54ac88636a6647f1618f0e697bf877fa71c2db92


# Revenir au dernier commit de la branche principale:

git checkout master


# Modificatione pour rendre pure fonctions le contenu de ctLoopAnyS.py
# afin de pouvoir realiser des experiences avec un simple appels a une
# procedure, prise en compte d'arguments externes dans ctLoopMain.py.
#
# Creation de nouveux fichiers python remplacant ctLoopAnyS.py :
#   ctLoopMain.py
#   ctLoopTools.py
# plus models_def_tb.py avec description des modeles (tableau) issu de ctObsMdldef.py

# Ajout des nouveaux fichiers
git add ctLoopMain.py ctLoopTools.py models_def_tb.py

# commit
git commit -am "Traveaux de rendre fontionnel toutes les actions dans ctLoopAnyS.py. Version preliminaire non fonctionnelle"

# commit
git commit -am "Traveaux de rendre fontionnel toutes les actions dans ctLoopAnyS.py. Ok jusqu'au traitement des Modeles - Il manque l'commit"

# ...


# AFC
git commit -am "Travaux pour rendre fontionnel les actions dans ctLoopAnyS.py. AFC Ok"


# Corriger le commentaire d'un commmit (pas exactement une correction
# mais un nouvel commit pointant sur le precedent):
git revert HEAD
# Un editeur est lance pour permettre la correction.
# Un nouveau commit sera créé, ce commit contiendra les modifications
# inverses de HEAD.


# ------------------------------------------------------------------
# Pour déclarer un serveur avec un repository distant ou mon
# repository local sera "pushed", c-a-d, ou je vais copier mon
# répertoire local:
#
#   git remote add origin <remote repository URL>
# Sets the new remote
#
#   git remote -v
# Verifies the new remote URL
#
# Exemple:
# 1) Le répertoire .../PourCarlos2_pour_Article/  contient un suivi
#    avec git.
# 2) Dans github.com j'ai cree le repository chapcar_upwellsom_art
#    sans README !
#
# ==> Associer le répertoire a ce repository:

cd .../PourCarlos2_pour_Article

# Creation du README.md
echo "# chapcar_upwellsom_art" >> README.md
git add README.md

# commit
git commit -am "Version fontionnelle. Main dans ctLoopMain.py. Premier export sur GITHUB, repository 'chapcar_upwellsom_art'"

git remote add origin https://github.com/carmman/chapcar_upwellsom_art
git push -u origin master

# ...
git push

